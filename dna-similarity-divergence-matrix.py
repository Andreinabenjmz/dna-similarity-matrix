# -*- coding: utf-8 -*-
"""Untitled52.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rmbMTG0xJ-AL-QXWZo5LsDFeKVXHww4X
"""

# ------------------------------------------
# STEP 1: INSTALL DEPENDENCIES
# ------------------------------------------
!sudo apt update
!sudo apt install -y clustalo
import os
os.environ['PATH'] += os.pathsep + '/usr/bin'
!pip install biopython numpy pandas matplotlib

# ------------------------------------------
# STEP 2: SEQUENCE PROCESSING
# ------------------------------------------
from Bio.Align.Applications import ClustalOmegaCommandline
from Bio import SeqIO
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

# Upload FASTA file
uploaded = files.upload()
input_file = next(iter(uploaded))
output_file = "aligned.fasta"

# Run Clustal Omega
clustal_cline = ClustalOmegaCommandline(
    cmd='clustalo',
    infile=input_file,
    outfile=output_file,
    auto=True,
    force=True
)
clustal_cline()

# Process sequences
aligned_sequences = list(SeqIO.parse(output_file, "fasta"))
n = len(aligned_sequences)
ids = [str(i+1) for i in range(n)]
name_mapping = {str(i+1): seq.id for i, seq in enumerate(aligned_sequences)}

# ------------------------------------------
# STEP 3: MATRIX CALCULATION
# ------------------------------------------
matrix = np.zeros((n, n))
for i in range(n):
    seq_i = str(aligned_sequences[i].seq).upper()
    for j in range(n):
        if i <= j:  # Calculate only once
            seq_j = str(aligned_sequences[j].seq).upper()
            valid = sum(1 for a, b in zip(seq_i, seq_j) if a != '-' and b != '-')
            matches = sum(1 for a, b in zip(seq_i, seq_j) if a == b and a != '-')
            similarity = round(matches/valid * 100, 1) if valid > 0 else 0.0
            matrix[i][j] = similarity
            matrix[j][i] = 100 - similarity

# ------------------------------------------
# STEP 4: GENERATE IMAGE WITH NUMBERED BORDERS
# ------------------------------------------
plt.figure(figsize=(16, 14))
ax = plt.gca()
ax.axis('off')

# Create extended matrix with borders
extended_cells = []

# 1. Top row with numbers
top_row = [''] + ids + ['']
extended_cells.append(top_row)

# 2. Center rows
for i in range(n):
    row = [ids[i]]  # Left number
    for j in range(n):
        if i == j:
            row.append('')  # Black diagonal
        else:
            row.append(f"{matrix[i][j]:.1f}")
    row.append(ids[i])  # Right number
    extended_cells.append(row)

# 3. Bottom row with numbers
bottom_row = [''] + ids + ['']
extended_cells.append(bottom_row)

# Create table
table = plt.table(
    cellText=extended_cells,
    loc='center',
    cellLoc='center',
    edges='closed'
)

# Format cells
for i in range(len(extended_cells)):
    for j in range(len(extended_cells[0])):
        cell = table[i, j]
        
        # Number borders (first and last row/column)
        if i == 0 or i == len(extended_cells)-1 or j == 0 or j == len(extended_cells[0])-1:
            cell.set_facecolor('#f8f8f8')
            cell.set_text_props(fontweight='bold')
        
        # Main diagonal
        if 1 <= i <= n and 1 <= j <= n and (i-1) == (j-1):
            cell.set_facecolor('#000000')

        # Font size
        cell.set_fontsize(9 if (i != 0 and i != len(extended_cells)-1) else 8)

# Adjust size
table.auto_set_column_width([0, len(extended_cells[0])-1])
table.scale(1, 1.2)

# Save image
plt.savefig('bordered_matrix.png', dpi=300, bbox_inches='tight')
plt.close()

# ------------------------------------------
# STEP 5: ADDITIONAL FILES
# ------------------------------------------
# Correspondence
with open("correspondence.txt", "w") as f:
    f.write("Number\tOriginal Name\n")
    for num, name in name_mapping.items():
        f.write(f"{num}\t{name}\n")

# Numerical data
pd.DataFrame(matrix, index=ids, columns=ids).to_csv("data.csv", float_format="%.1f")

# ------------------------------------------
# STEP 6: DOWNLOAD RESULTS
# ------------------------------------------
files.download('bordered_matrix.png')
files.download('data.csv')
files.download('correspondence.txt')

print("Process completed! Generated files:")
print("- bordered_matrix.png (Matrix with numbered borders)")
print("- data.csv (Complete numerical values)")
print("- correspondence.txt (Number-name relationship)")
