# -*- coding: utf-8 -*-
"""Untitled52.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rmbMTG0xJ-AL-QXWZo5LsDFeKVXHww4X
"""

# ------------------------------------------
# PASO 1: INSTALACIÓN DE DEPENDENCIAS
# ------------------------------------------
!sudo apt update
!sudo apt install -y clustalo
import os
os.environ['PATH'] += os.pathsep + '/usr/bin'
!pip install biopython numpy pandas matplotlib

# ------------------------------------------
# PASO 2: PROCESAMIENTO DE SECUENCIAS
# ------------------------------------------
from Bio.Align.Applications import ClustalOmegaCommandline
from Bio import SeqIO
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import files

# Subir archivo FASTA
uploaded = files.upload()
input_file = next(iter(uploaded))
output_file = "aligned.fasta"

# Ejecutar Clustal Omega
clustal_cline = ClustalOmegaCommandline(
    cmd='clustalo',
    infile=input_file,
    outfile=output_file,
    auto=True,
    force=True
)
clustal_cline()

# Procesar secuencias
aligned_sequences = list(SeqIO.parse(output_file, "fasta"))
n = len(aligned_sequences)
ids = [str(i+1) for i in range(n)]
name_mapping = {str(i+1): seq.id for i, seq in enumerate(aligned_sequences)}

# ------------------------------------------
# PASO 3: CÁLCULO DE MATRIZ
# ------------------------------------------
matriz = np.zeros((n, n))
for i in range(n):
    seq_i = str(aligned_sequences[i].seq).upper()
    for j in range(n):
        if i <= j:  # Calcular solo una vez
            seq_j = str(aligned_sequences[j].seq).upper()
            validas = sum(1 for a, b in zip(seq_i, seq_j) if a != '-' and b != '-')
            coincidencias = sum(1 for a, b in zip(seq_i, seq_j) if a == b and a != '-')
            similitud = round(coincidencias/validas * 100, 1) if validas > 0 else 0.0
            matriz[i][j] = similitud
            matriz[j][i] = 100 - similitud

# ------------------------------------------
# PASO 4: GENERAR IMAGEN CON BORDES NUMERADOS
# ------------------------------------------
plt.figure(figsize=(16, 14))
ax = plt.gca()
ax.axis('off')

# Crear matriz extendida con bordes
celdas_extendidas = []

# 1. Fila superior con números
fila_superior = [''] + ids + ['']
celdas_extendidas.append(fila_superior)

# 2. Filas centrales
for i in range(n):
    fila = [ids[i]]  # Número izquierdo
    for j in range(n):
        if i == j:
            fila.append('')  # Diagonal negra
        else:
            fila.append(f"{matriz[i][j]:.1f}")
    fila.append(ids[i])  # Número derecho
    celdas_extendidas.append(fila)

# 3. Fila inferior con números
fila_inferior = [''] + ids + ['']
celdas_extendidas.append(fila_inferior)

# Crear tabla
tabla = plt.table(
    cellText=celdas_extendidas,
    loc='center',
    cellLoc='center',
    edges='closed'
)

# Formatear celdas
for i in range(len(celdas_extendidas)):
    for j in range(len(celdas_extendidas[0])):
        celda = tabla[i, j]

        # Bordes numéricos (primera y última fila/columna)
        if i == 0 or i == len(celdas_extendidas)-1 or j == 0 or j == len(celdas_extendidas[0])-1:
            celda.set_facecolor('#f8f8f8')
            celda.set_text_props(fontweight='bold')

        # Diagonal principal
        if 1 <= i <= n and 1 <= j <= n and (i-1) == (j-1):
            celda.set_facecolor('#000000')

        # Tamaño de fuente
        celda.set_fontsize(9 if (i != 0 and i != len(celdas_extendidas)-1) else 8)

# Ajustar tamaño
tabla.auto_set_column_width([0, len(celdas_extendidas[0])-1])
tabla.scale(1, 1.2)

# Guardar imagen
plt.savefig('matriz_bordeada.png', dpi=300, bbox_inches='tight')
plt.close()

# ------------------------------------------
# PASO 5: ARCHIVOS ADICIONALES
# ------------------------------------------
# Correspondencia
with open("correspondencia.txt", "w") as f:
    f.write("Número\tNombre Original\n")
    for num, nombre in name_mapping.items():
        f.write(f"{num}\t{nombre}\n")

# Datos numéricos
pd.DataFrame(matriz, index=ids, columns=ids).to_csv("datos.csv", float_format="%.1f")

# ------------------------------------------
# PASO 6: DESCARGAR RESULTADOS
# ------------------------------------------
files.download('matriz_bordeada.png')
files.download('datos.csv')
files.download('correspondencia.txt')

print("¡Proceso completado! Archivos generados:")
print("- matriz_bordeada.png (Matriz con bordes numerados)")
print("- datos.csv (Valores numéricos completos)")
print("- correspondencia.txt (Relación número-nombre)")